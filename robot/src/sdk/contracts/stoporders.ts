// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: stoporders.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { MoneyValue, Quotation } from "./common";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "tinkoff.public.invest.api.contract.v1";

/** Направление сделки стоп-заявки. */
export enum StopOrderDirection {
  /** STOP_ORDER_DIRECTION_UNSPECIFIED - Значение не указано. */
  STOP_ORDER_DIRECTION_UNSPECIFIED = 0,
  /** STOP_ORDER_DIRECTION_BUY - Покупка. */
  STOP_ORDER_DIRECTION_BUY = 1,
  /** STOP_ORDER_DIRECTION_SELL - Продажа. */
  STOP_ORDER_DIRECTION_SELL = 2,
  UNRECOGNIZED = -1,
}

export function stopOrderDirectionFromJSON(object: any): StopOrderDirection {
  switch (object) {
    case 0:
    case "STOP_ORDER_DIRECTION_UNSPECIFIED":
      return StopOrderDirection.STOP_ORDER_DIRECTION_UNSPECIFIED;
    case 1:
    case "STOP_ORDER_DIRECTION_BUY":
      return StopOrderDirection.STOP_ORDER_DIRECTION_BUY;
    case 2:
    case "STOP_ORDER_DIRECTION_SELL":
      return StopOrderDirection.STOP_ORDER_DIRECTION_SELL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StopOrderDirection.UNRECOGNIZED;
  }
}

export function stopOrderDirectionToJSON(object: StopOrderDirection): string {
  switch (object) {
    case StopOrderDirection.STOP_ORDER_DIRECTION_UNSPECIFIED:
      return "STOP_ORDER_DIRECTION_UNSPECIFIED";
    case StopOrderDirection.STOP_ORDER_DIRECTION_BUY:
      return "STOP_ORDER_DIRECTION_BUY";
    case StopOrderDirection.STOP_ORDER_DIRECTION_SELL:
      return "STOP_ORDER_DIRECTION_SELL";
    case StopOrderDirection.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Тип экспирации стоп-заявке. */
export enum StopOrderExpirationType {
  /** STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED - Значение не указано. */
  STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED = 0,
  /** STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL - Действительно до отмены. */
  STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL = 1,
  /** STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE - Действительно до даты снятия. */
  STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE = 2,
  UNRECOGNIZED = -1,
}

export function stopOrderExpirationTypeFromJSON(object: any): StopOrderExpirationType {
  switch (object) {
    case 0:
    case "STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED":
      return StopOrderExpirationType.STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED;
    case 1:
    case "STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL":
      return StopOrderExpirationType.STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL;
    case 2:
    case "STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE":
      return StopOrderExpirationType.STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StopOrderExpirationType.UNRECOGNIZED;
  }
}

export function stopOrderExpirationTypeToJSON(object: StopOrderExpirationType): string {
  switch (object) {
    case StopOrderExpirationType.STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED:
      return "STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED";
    case StopOrderExpirationType.STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL:
      return "STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL";
    case StopOrderExpirationType.STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE:
      return "STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE";
    case StopOrderExpirationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Тип стоп-заявки. */
export enum StopOrderType {
  /** STOP_ORDER_TYPE_UNSPECIFIED - Значение не указано. */
  STOP_ORDER_TYPE_UNSPECIFIED = 0,
  /** STOP_ORDER_TYPE_TAKE_PROFIT - Take-profit заявка. */
  STOP_ORDER_TYPE_TAKE_PROFIT = 1,
  /** STOP_ORDER_TYPE_STOP_LOSS - Stop-loss заявка. */
  STOP_ORDER_TYPE_STOP_LOSS = 2,
  /** STOP_ORDER_TYPE_STOP_LIMIT - Stop-limit заявка. */
  STOP_ORDER_TYPE_STOP_LIMIT = 3,
  UNRECOGNIZED = -1,
}

export function stopOrderTypeFromJSON(object: any): StopOrderType {
  switch (object) {
    case 0:
    case "STOP_ORDER_TYPE_UNSPECIFIED":
      return StopOrderType.STOP_ORDER_TYPE_UNSPECIFIED;
    case 1:
    case "STOP_ORDER_TYPE_TAKE_PROFIT":
      return StopOrderType.STOP_ORDER_TYPE_TAKE_PROFIT;
    case 2:
    case "STOP_ORDER_TYPE_STOP_LOSS":
      return StopOrderType.STOP_ORDER_TYPE_STOP_LOSS;
    case 3:
    case "STOP_ORDER_TYPE_STOP_LIMIT":
      return StopOrderType.STOP_ORDER_TYPE_STOP_LIMIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StopOrderType.UNRECOGNIZED;
  }
}

export function stopOrderTypeToJSON(object: StopOrderType): string {
  switch (object) {
    case StopOrderType.STOP_ORDER_TYPE_UNSPECIFIED:
      return "STOP_ORDER_TYPE_UNSPECIFIED";
    case StopOrderType.STOP_ORDER_TYPE_TAKE_PROFIT:
      return "STOP_ORDER_TYPE_TAKE_PROFIT";
    case StopOrderType.STOP_ORDER_TYPE_STOP_LOSS:
      return "STOP_ORDER_TYPE_STOP_LOSS";
    case StopOrderType.STOP_ORDER_TYPE_STOP_LIMIT:
      return "STOP_ORDER_TYPE_STOP_LIMIT";
    case StopOrderType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Запрос выставления стоп-заявки. */
export interface PostStopOrderRequest {
  /**
   * Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
   *
   * @deprecated
   */
  figi: string;
  /** Количество лотов. */
  quantity: number;
  /** Цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. */
  price:
    | Quotation
    | undefined;
  /** Стоп-цена заявки за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. */
  stopPrice:
    | Quotation
    | undefined;
  /** Направление операции. */
  direction: StopOrderDirection;
  /** Номер счёта. */
  accountId: string;
  /** Тип экспирации заявки. */
  expirationType: StopOrderExpirationType;
  /** Тип заявки. */
  stopOrderType: StopOrderType;
  /** Дата и время окончания действия стоп-заявки в часовом поясе UTC. **Для ExpirationType = GoodTillDate заполнение обязательно**. */
  expireDate:
    | Date
    | undefined;
  /** Идентификатор инструмента, принимает значения Figi или instrument_uid. */
  instrumentId: string;
}

/** Результат выставления стоп-заявки. */
export interface PostStopOrderResponse {
  /** Уникальный идентификатор стоп-заявки. */
  stopOrderId: string;
}

/** Запрос получения списка активных стоп-заявок. */
export interface GetStopOrdersRequest {
  /** Идентификатор счёта клиента. */
  accountId: string;
}

/** Список активных стоп-заявок. */
export interface GetStopOrdersResponse {
  /** Массив стоп-заявок по счёту. */
  stopOrders: StopOrder[];
}

/** Запрос отмены выставленной стоп-заявки. */
export interface CancelStopOrderRequest {
  /** Идентификатор счёта клиента. */
  accountId: string;
  /** Уникальный идентификатор стоп-заявки. */
  stopOrderId: string;
}

/** Результат отмены выставленной стоп-заявки. */
export interface CancelStopOrderResponse {
  /** Время отмены заявки в часовом поясе UTC. */
  time: Date | undefined;
}

/** Информация о стоп-заявке. */
export interface StopOrder {
  /** Идентификатор-идентификатор стоп-заявки. */
  stopOrderId: string;
  /** Запрошено лотов. */
  lotsRequested: number;
  /** Figi-идентификатор инструмента. */
  figi: string;
  /** Направление операции. */
  direction: StopOrderDirection;
  /** Валюта стоп-заявки. */
  currency: string;
  /** Тип стоп-заявки. */
  orderType: StopOrderType;
  /** Дата и время выставления заявки в часовом поясе UTC. */
  createDate:
    | Date
    | undefined;
  /** Дата и время конвертации стоп-заявки в биржевую в часовом поясе UTC. */
  activationDateTime:
    | Date
    | undefined;
  /** Дата и время снятия заявки в часовом поясе UTC. */
  expirationTime:
    | Date
    | undefined;
  /** Цена заявки за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. */
  price:
    | MoneyValue
    | undefined;
  /** Цена активации стоп-заявки за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. */
  stopPrice:
    | MoneyValue
    | undefined;
  /** instrument_uid идентификатор инструмента. */
  instrumentUid: string;
}

function createBasePostStopOrderRequest(): PostStopOrderRequest {
  return {
    figi: "",
    quantity: 0,
    price: undefined,
    stopPrice: undefined,
    direction: 0,
    accountId: "",
    expirationType: 0,
    stopOrderType: 0,
    expireDate: undefined,
    instrumentId: "",
  };
}

export const PostStopOrderRequest: MessageFns<PostStopOrderRequest> = {
  encode(message: PostStopOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.figi !== "") {
      writer.uint32(10).string(message.figi);
    }
    if (message.quantity !== 0) {
      writer.uint32(16).int64(message.quantity);
    }
    if (message.price !== undefined) {
      Quotation.encode(message.price, writer.uint32(26).fork()).join();
    }
    if (message.stopPrice !== undefined) {
      Quotation.encode(message.stopPrice, writer.uint32(34).fork()).join();
    }
    if (message.direction !== 0) {
      writer.uint32(40).int32(message.direction);
    }
    if (message.accountId !== "") {
      writer.uint32(50).string(message.accountId);
    }
    if (message.expirationType !== 0) {
      writer.uint32(56).int32(message.expirationType);
    }
    if (message.stopOrderType !== 0) {
      writer.uint32(64).int32(message.stopOrderType);
    }
    if (message.expireDate !== undefined) {
      Timestamp.encode(toTimestamp(message.expireDate), writer.uint32(74).fork()).join();
    }
    if (message.instrumentId !== "") {
      writer.uint32(82).string(message.instrumentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostStopOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostStopOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.figi = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.quantity = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.price = Quotation.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.stopPrice = Quotation.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.expirationType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.stopOrderType = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.expireDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.instrumentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostStopOrderRequest {
    return {
      figi: isSet(object.figi) ? globalThis.String(object.figi) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      price: isSet(object.price) ? Quotation.fromJSON(object.price) : undefined,
      stopPrice: isSet(object.stopPrice) ? Quotation.fromJSON(object.stopPrice) : undefined,
      direction: isSet(object.direction) ? stopOrderDirectionFromJSON(object.direction) : 0,
      accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
      expirationType: isSet(object.expirationType) ? stopOrderExpirationTypeFromJSON(object.expirationType) : 0,
      stopOrderType: isSet(object.stopOrderType) ? stopOrderTypeFromJSON(object.stopOrderType) : 0,
      expireDate: isSet(object.expireDate) ? fromJsonTimestamp(object.expireDate) : undefined,
      instrumentId: isSet(object.instrumentId) ? globalThis.String(object.instrumentId) : "",
    };
  },

  toJSON(message: PostStopOrderRequest): unknown {
    const obj: any = {};
    if (message.figi !== "") {
      obj.figi = message.figi;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.price !== undefined) {
      obj.price = Quotation.toJSON(message.price);
    }
    if (message.stopPrice !== undefined) {
      obj.stopPrice = Quotation.toJSON(message.stopPrice);
    }
    if (message.direction !== 0) {
      obj.direction = stopOrderDirectionToJSON(message.direction);
    }
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    if (message.expirationType !== 0) {
      obj.expirationType = stopOrderExpirationTypeToJSON(message.expirationType);
    }
    if (message.stopOrderType !== 0) {
      obj.stopOrderType = stopOrderTypeToJSON(message.stopOrderType);
    }
    if (message.expireDate !== undefined) {
      obj.expireDate = message.expireDate.toISOString();
    }
    if (message.instrumentId !== "") {
      obj.instrumentId = message.instrumentId;
    }
    return obj;
  },

  create(base?: DeepPartial<PostStopOrderRequest>): PostStopOrderRequest {
    return PostStopOrderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PostStopOrderRequest>): PostStopOrderRequest {
    const message = createBasePostStopOrderRequest();
    message.figi = object.figi ?? "";
    message.quantity = object.quantity ?? 0;
    message.price = (object.price !== undefined && object.price !== null)
      ? Quotation.fromPartial(object.price)
      : undefined;
    message.stopPrice = (object.stopPrice !== undefined && object.stopPrice !== null)
      ? Quotation.fromPartial(object.stopPrice)
      : undefined;
    message.direction = object.direction ?? 0;
    message.accountId = object.accountId ?? "";
    message.expirationType = object.expirationType ?? 0;
    message.stopOrderType = object.stopOrderType ?? 0;
    message.expireDate = object.expireDate ?? undefined;
    message.instrumentId = object.instrumentId ?? "";
    return message;
  },
};

function createBasePostStopOrderResponse(): PostStopOrderResponse {
  return { stopOrderId: "" };
}

export const PostStopOrderResponse: MessageFns<PostStopOrderResponse> = {
  encode(message: PostStopOrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stopOrderId !== "") {
      writer.uint32(10).string(message.stopOrderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostStopOrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostStopOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stopOrderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostStopOrderResponse {
    return { stopOrderId: isSet(object.stopOrderId) ? globalThis.String(object.stopOrderId) : "" };
  },

  toJSON(message: PostStopOrderResponse): unknown {
    const obj: any = {};
    if (message.stopOrderId !== "") {
      obj.stopOrderId = message.stopOrderId;
    }
    return obj;
  },

  create(base?: DeepPartial<PostStopOrderResponse>): PostStopOrderResponse {
    return PostStopOrderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PostStopOrderResponse>): PostStopOrderResponse {
    const message = createBasePostStopOrderResponse();
    message.stopOrderId = object.stopOrderId ?? "";
    return message;
  },
};

function createBaseGetStopOrdersRequest(): GetStopOrdersRequest {
  return { accountId: "" };
}

export const GetStopOrdersRequest: MessageFns<GetStopOrdersRequest> = {
  encode(message: GetStopOrdersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStopOrdersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStopOrdersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStopOrdersRequest {
    return { accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "" };
  },

  toJSON(message: GetStopOrdersRequest): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetStopOrdersRequest>): GetStopOrdersRequest {
    return GetStopOrdersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStopOrdersRequest>): GetStopOrdersRequest {
    const message = createBaseGetStopOrdersRequest();
    message.accountId = object.accountId ?? "";
    return message;
  },
};

function createBaseGetStopOrdersResponse(): GetStopOrdersResponse {
  return { stopOrders: [] };
}

export const GetStopOrdersResponse: MessageFns<GetStopOrdersResponse> = {
  encode(message: GetStopOrdersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.stopOrders) {
      StopOrder.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStopOrdersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStopOrdersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stopOrders.push(StopOrder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStopOrdersResponse {
    return {
      stopOrders: globalThis.Array.isArray(object?.stopOrders)
        ? object.stopOrders.map((e: any) => StopOrder.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetStopOrdersResponse): unknown {
    const obj: any = {};
    if (message.stopOrders?.length) {
      obj.stopOrders = message.stopOrders.map((e) => StopOrder.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetStopOrdersResponse>): GetStopOrdersResponse {
    return GetStopOrdersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStopOrdersResponse>): GetStopOrdersResponse {
    const message = createBaseGetStopOrdersResponse();
    message.stopOrders = object.stopOrders?.map((e) => StopOrder.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCancelStopOrderRequest(): CancelStopOrderRequest {
  return { accountId: "", stopOrderId: "" };
}

export const CancelStopOrderRequest: MessageFns<CancelStopOrderRequest> = {
  encode(message: CancelStopOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    if (message.stopOrderId !== "") {
      writer.uint32(18).string(message.stopOrderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelStopOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelStopOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stopOrderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelStopOrderRequest {
    return {
      accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
      stopOrderId: isSet(object.stopOrderId) ? globalThis.String(object.stopOrderId) : "",
    };
  },

  toJSON(message: CancelStopOrderRequest): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    if (message.stopOrderId !== "") {
      obj.stopOrderId = message.stopOrderId;
    }
    return obj;
  },

  create(base?: DeepPartial<CancelStopOrderRequest>): CancelStopOrderRequest {
    return CancelStopOrderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelStopOrderRequest>): CancelStopOrderRequest {
    const message = createBaseCancelStopOrderRequest();
    message.accountId = object.accountId ?? "";
    message.stopOrderId = object.stopOrderId ?? "";
    return message;
  },
};

function createBaseCancelStopOrderResponse(): CancelStopOrderResponse {
  return { time: undefined };
}

export const CancelStopOrderResponse: MessageFns<CancelStopOrderResponse> = {
  encode(message: CancelStopOrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelStopOrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelStopOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelStopOrderResponse {
    return { time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined };
  },

  toJSON(message: CancelStopOrderResponse): unknown {
    const obj: any = {};
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<CancelStopOrderResponse>): CancelStopOrderResponse {
    return CancelStopOrderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelStopOrderResponse>): CancelStopOrderResponse {
    const message = createBaseCancelStopOrderResponse();
    message.time = object.time ?? undefined;
    return message;
  },
};

function createBaseStopOrder(): StopOrder {
  return {
    stopOrderId: "",
    lotsRequested: 0,
    figi: "",
    direction: 0,
    currency: "",
    orderType: 0,
    createDate: undefined,
    activationDateTime: undefined,
    expirationTime: undefined,
    price: undefined,
    stopPrice: undefined,
    instrumentUid: "",
  };
}

export const StopOrder: MessageFns<StopOrder> = {
  encode(message: StopOrder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stopOrderId !== "") {
      writer.uint32(10).string(message.stopOrderId);
    }
    if (message.lotsRequested !== 0) {
      writer.uint32(16).int64(message.lotsRequested);
    }
    if (message.figi !== "") {
      writer.uint32(26).string(message.figi);
    }
    if (message.direction !== 0) {
      writer.uint32(32).int32(message.direction);
    }
    if (message.currency !== "") {
      writer.uint32(42).string(message.currency);
    }
    if (message.orderType !== 0) {
      writer.uint32(48).int32(message.orderType);
    }
    if (message.createDate !== undefined) {
      Timestamp.encode(toTimestamp(message.createDate), writer.uint32(58).fork()).join();
    }
    if (message.activationDateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.activationDateTime), writer.uint32(66).fork()).join();
    }
    if (message.expirationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationTime), writer.uint32(74).fork()).join();
    }
    if (message.price !== undefined) {
      MoneyValue.encode(message.price, writer.uint32(82).fork()).join();
    }
    if (message.stopPrice !== undefined) {
      MoneyValue.encode(message.stopPrice, writer.uint32(90).fork()).join();
    }
    if (message.instrumentUid !== "") {
      writer.uint32(98).string(message.instrumentUid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopOrder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stopOrderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lotsRequested = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.figi = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.orderType = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.activationDateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.expirationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.price = MoneyValue.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.stopPrice = MoneyValue.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.instrumentUid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopOrder {
    return {
      stopOrderId: isSet(object.stopOrderId) ? globalThis.String(object.stopOrderId) : "",
      lotsRequested: isSet(object.lotsRequested) ? globalThis.Number(object.lotsRequested) : 0,
      figi: isSet(object.figi) ? globalThis.String(object.figi) : "",
      direction: isSet(object.direction) ? stopOrderDirectionFromJSON(object.direction) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      orderType: isSet(object.orderType) ? stopOrderTypeFromJSON(object.orderType) : 0,
      createDate: isSet(object.createDate) ? fromJsonTimestamp(object.createDate) : undefined,
      activationDateTime: isSet(object.activationDateTime) ? fromJsonTimestamp(object.activationDateTime) : undefined,
      expirationTime: isSet(object.expirationTime) ? fromJsonTimestamp(object.expirationTime) : undefined,
      price: isSet(object.price) ? MoneyValue.fromJSON(object.price) : undefined,
      stopPrice: isSet(object.stopPrice) ? MoneyValue.fromJSON(object.stopPrice) : undefined,
      instrumentUid: isSet(object.instrumentUid) ? globalThis.String(object.instrumentUid) : "",
    };
  },

  toJSON(message: StopOrder): unknown {
    const obj: any = {};
    if (message.stopOrderId !== "") {
      obj.stopOrderId = message.stopOrderId;
    }
    if (message.lotsRequested !== 0) {
      obj.lotsRequested = Math.round(message.lotsRequested);
    }
    if (message.figi !== "") {
      obj.figi = message.figi;
    }
    if (message.direction !== 0) {
      obj.direction = stopOrderDirectionToJSON(message.direction);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.orderType !== 0) {
      obj.orderType = stopOrderTypeToJSON(message.orderType);
    }
    if (message.createDate !== undefined) {
      obj.createDate = message.createDate.toISOString();
    }
    if (message.activationDateTime !== undefined) {
      obj.activationDateTime = message.activationDateTime.toISOString();
    }
    if (message.expirationTime !== undefined) {
      obj.expirationTime = message.expirationTime.toISOString();
    }
    if (message.price !== undefined) {
      obj.price = MoneyValue.toJSON(message.price);
    }
    if (message.stopPrice !== undefined) {
      obj.stopPrice = MoneyValue.toJSON(message.stopPrice);
    }
    if (message.instrumentUid !== "") {
      obj.instrumentUid = message.instrumentUid;
    }
    return obj;
  },

  create(base?: DeepPartial<StopOrder>): StopOrder {
    return StopOrder.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopOrder>): StopOrder {
    const message = createBaseStopOrder();
    message.stopOrderId = object.stopOrderId ?? "";
    message.lotsRequested = object.lotsRequested ?? 0;
    message.figi = object.figi ?? "";
    message.direction = object.direction ?? 0;
    message.currency = object.currency ?? "";
    message.orderType = object.orderType ?? 0;
    message.createDate = object.createDate ?? undefined;
    message.activationDateTime = object.activationDateTime ?? undefined;
    message.expirationTime = object.expirationTime ?? undefined;
    message.price = (object.price !== undefined && object.price !== null)
      ? MoneyValue.fromPartial(object.price)
      : undefined;
    message.stopPrice = (object.stopPrice !== undefined && object.stopPrice !== null)
      ? MoneyValue.fromPartial(object.stopPrice)
      : undefined;
    message.instrumentUid = object.instrumentUid ?? "";
    return message;
  },
};

/**
 * Сервис предназначен для работы со стоп-заявками:</br> **1**.
 * выставление;</br> **2**. отмена;</br> **3**. получение списка стоп-заявок.
 */
export type StopOrdersServiceDefinition = typeof StopOrdersServiceDefinition;
export const StopOrdersServiceDefinition = {
  name: "StopOrdersService",
  fullName: "tinkoff.public.invest.api.contract.v1.StopOrdersService",
  methods: {
    /** Метод выставления стоп-заявки. */
    postStopOrder: {
      name: "PostStopOrder",
      requestType: PostStopOrderRequest,
      requestStream: false,
      responseType: PostStopOrderResponse,
      responseStream: false,
      options: {},
    },
    /** Метод получения списка активных стоп заявок по счёту. */
    getStopOrders: {
      name: "GetStopOrders",
      requestType: GetStopOrdersRequest,
      requestStream: false,
      responseType: GetStopOrdersResponse,
      responseStream: false,
      options: {},
    },
    /** Метод отмены стоп-заявки. */
    cancelStopOrder: {
      name: "CancelStopOrder",
      requestType: CancelStopOrderRequest,
      requestStream: false,
      responseType: CancelStopOrderResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
